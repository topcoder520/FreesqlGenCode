@{
    var gen = Model as Context.EntityTemplate;
}
using Common;
using DAL;
using Model;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace @gen.Namespace
{
    public class @("Bll" + gen.EntityName)
    {
        public @("Bll" + gen.EntityName) { }

        private readonly @("Dal" + gen.EntityName) dal = new @("Dal" + gen.EntityName)();

        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(int Id)
        {
            return dal.Exists(Id);
        }
        public bool Exists(Expression<Func<@(gen.EntityName), bool>> whereExpression)
        {
            return dal.Exists(whereExpression);
        }
        /// <summary>
        /// 增加一条数据
        /// </summary>
        public int Add(@(gen.EntityName) model) { 
            return dal.Add(model);
        }
        /// <summary>
        /// 批量添加数据
        /// </summary>
        public int BatchInsert(List<@(gen.EntityName)> listModel)
        {
            return dal.BatchInsert(listModel);
        }
        public int Update(Expression<Func<@(gen.EntityName), @(gen.EntityName)>> columns, Expression<Func<@(gen.EntityName), bool>> whereExpression)
        {
            return dal.Update(columns, whereExpression);
        }
        /// <summary>
        /// 删除一条数据
        /// </summary>
        public int Delete(dynamic Id)
        {
            return dal.Delete(Id);
        }
        /// <summary>
        /// 批量删除数据
        /// </summary>
        public int DeleteList(List<int> Idlist)
        {
            return dal.DeleteList(Idlist);
        }

        public int Delete(Expression<Func<@(gen.EntityName), bool>> whereExpression)
        {
            return dal.Delete(whereExpression);
        }
        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public @(gen.EntityName) GetModel(int Id)
        {
            return dal.GetModel(Id);
        }

        public @(gen.EntityName) GetModel(Expression<Func<@(gen.EntityName), bool>> whereExpression)
        {
            return dal.GetModel(whereExpression);
        }
        /// <summary>
        /// 获取记录
        /// </summary>
        public List<@(gen.EntityName)> GetList(Expression<Func<@(gen.EntityName), bool>> whereExpression, int? Top = null, string orderBy = "")
        {
            return dal.GetList(whereExpression, Top, orderBy);
        }
        /// <summary>
        /// 获取记录总数
        /// </summary>
        public int GetRecordCount(Expression<Func<@(gen.EntityName), bool>> whereExpression)
        {
            return dal.GetRecordCount(whereExpression);
        }
        public PagedResult<@(gen.EntityName)> GetListByPage(Expression<Func<@(gen.EntityName), bool>> whereExpression, int pageIndex, int pageSize)
        {
            return dal.GetListByPage(whereExpression, pageIndex, pageSize);
        }
    }
}

