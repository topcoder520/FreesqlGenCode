using FreeSql.DatabaseModel;
using Org.BouncyCastle.Asn1;
using RazorEngine;
using RazorEngine.Configuration;
using RazorEngine.Templating;
using RazorEngine.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace Context
{
    public class CodeGenerate
    {
        public async Task<List<string>> Setup(TaskBuild taskBuild, string tableName)
        {
            DbTableInfo tableInfo = taskBuild.tableInfos.Where(a=>a.Name== tableName).FirstOrDefault();
            try
            {
                var listText =  await Task.Run(() =>
                {
                    var config = new TemplateServiceConfiguration();
                    config.EncodedStringFactory = new RawStringFactory();
                    Engine.Razor = RazorEngineService.Create(config);

                    List<string> listCodeResult = new List<string>();

                    foreach (var template in taskBuild.Templates)
                    {
                        var razorId = Guid.NewGuid().ToString("N");
                        if (string.IsNullOrWhiteSpace(template.TemplateText))
                        {
                            var html = File.ReadAllText(Path.Combine(Environment.CurrentDirectory, "", template.TemplateName));
                            Engine.Razor.Compile(html, razorId);
                        }
                        else
                        {
                            Engine.Razor.Compile(template.TemplateText, razorId);
                        }
                        //开始生成操作
                        var sw = new StringWriter();
                        var model = new EntityTemplate(taskBuild, tableInfo);
                        Engine.Razor.Run(razorId, sw, null, model);
                        StringBuilder plus = new StringBuilder();
                        plus.AppendLine("//------------------------------------------------------------------------------");
                        plus.AppendLine("// <auto-generated>");
                        plus.AppendLine("//     此代码由工具生成。");
                        plus.AppendLine("//     对此文件的更改可能会导致不正确的行为，并且如果");
                        plus.AppendLine("//     重新生成代码，这些更改将会丢失。");
                        plus.AppendLine("// </auto-generated>");
                        plus.AppendLine("//------------------------------------------------------------------------------");
                        plus.Append(sw.ToString());
                        plus.AppendLine();
                        listCodeResult.Add(plus.ToString());
                    }

                    return listCodeResult;
                });
                return listText;
            }
            catch (Exception ex)
            {
                Common.Console.Log("=========Setup==========");
                Common.Console.Log(ex.ToString());
                return new List<string>();
            }
        }
        /// <summary>
        /// 传入任务信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<string> Setup(TaskBuild taskBuild)
        {
            try
            {
                var paths = await Task.Run(() =>
                {
                    var config = new TemplateServiceConfiguration();
                    config.EncodedStringFactory = new RawStringFactory();
                    Engine.Razor = RazorEngineService.Create(config);

                    string path = string.Empty;

                    int flag = taskBuild.Templates.Count;
                    foreach (var template in taskBuild.Templates)
                    {
                        path = $"{taskBuild.GeneratePath}";
                        if (flag > 1)
                        {
                            path = Path.Combine(path,template.TemplateName.Replace(".cshtml", ""));
                        }
                        if (!Directory.Exists(path)) Directory.CreateDirectory(path);

                        var razorId = Guid.NewGuid().ToString("N");
                        if (string.IsNullOrWhiteSpace(template.TemplateText))
                        {
                            var html = File.ReadAllText(Path.Combine(Environment.CurrentDirectory, "", template.TemplateName));
                            Engine.Razor.Compile(html, razorId);
                        }
                        else
                        {
                            Engine.Razor.Compile(template.TemplateText, razorId);
                        }
                        //开始生成操作
                        foreach (var table in taskBuild.tableInfos)
                        {
                            var sw = new StringWriter();
                            var model = new EntityTemplate(taskBuild, table);
                            Engine.Razor.Run(razorId, sw, null, model);
                            StringBuilder plus = new StringBuilder();
                            plus.AppendLine("//------------------------------------------------------------------------------");
                            plus.AppendLine("// <auto-generated>");
                            plus.AppendLine("//     此代码由工具生成。");
                            plus.AppendLine("//     对此文件的更改可能会导致不正确的行为，并且如果");
                            plus.AppendLine("//     重新生成代码，这些更改将会丢失。");
                            plus.AppendLine("// </auto-generated>");
                            plus.AppendLine("//------------------------------------------------------------------------------");
                            plus.Append(sw.ToString());
                            plus.AppendLine();
                            var outPath = $"{taskBuild.FileName.Replace("{name}", model.GetCsName(table.Name))}";
                            if (!string.IsNullOrEmpty(taskBuild.FilterTableChar))
                                outPath = outPath.Replace(taskBuild.FilterTableChar, "").Trim();
                            outPath = Path.Combine(path, outPath);
                            if (File.Exists(outPath))
                            {
                                if (taskBuild.skipSameNameFile)
                                {
                                    continue;
                                }
                                if (!taskBuild.CoverExistFile)
                                {
                                    FileInfo fileInfo = new FileInfo(outPath);
                                    string str = "";
                                    string destPathFormat = outPath + "_" + fileInfo.CreationTime.ToString("yyyy-MM-dd") + "{0}" + ".txt";
                                    for (int i = 0; i < 100; i++)
                                    {
                                        string destPath = string.Format(destPathFormat, str);
                                        if (!File.Exists(destPath))
                                        {
                                            break;
                                        }
                                        str = $"({i + 1})";
                                    }
                                    destPathFormat = string.Format(destPathFormat, str);
                                    fileInfo.MoveTo(destPathFormat);
                                }
                            }
                            File.WriteAllText(outPath, plus.ToString());
                        }
                    }
                    return path;
                });
                //Process.Start(paths); //打开文件夹
                return "Success";
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<string> Setup(TaskBuild taskBuild, string code, List<DbTableInfo> dbTables, DbTableInfo dbTableInfo)
        {
            StringBuilder plus = new StringBuilder();
            try
            {
                var config = new TemplateServiceConfiguration();
                config.EncodedStringFactory = new RawStringFactory();
                Engine.Razor = RazorEngineService.Create(config);
                var razorId = Guid.NewGuid().ToString("N");
                Engine.Razor.Compile(code, razorId);

                var sw = new StringWriter();
                var model = new EntityTemplate(taskBuild, dbTableInfo);
                Engine.Razor.Run(razorId, sw, null, model);

                plus.AppendLine("//------------------------------------------------------------------------------");
                plus.AppendLine("// <auto-generated>");
                plus.AppendLine("//     此代码由工具生成。");
                plus.AppendLine("//     对此文件的更改可能会导致不正确的行为，并且如果");
                plus.AppendLine("//     重新生成代码，这些更改将会丢失。");
                plus.AppendLine("// </auto-generated>");
                plus.AppendLine("//------------------------------------------------------------------------------");
                plus.Append(sw.ToString());
                plus.AppendLine();
                return await Task.FromResult(plus.ToString());
            }
            catch
            {
                return await Task.FromResult(plus.ToString());
            }
        }
    }
}
